// Code generated by MockGen. DO NOT EDIT.
// Source: services/service.go

// Package mock_services is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "sesi-4/model"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderServiceIface is a mock of OrderServiceIface interface.
type MockOrderServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceIfaceMockRecorder
}

// MockOrderServiceIfaceMockRecorder is the mock recorder for MockOrderServiceIface.
type MockOrderServiceIfaceMockRecorder struct {
	mock *MockOrderServiceIface
}

// NewMockOrderServiceIface creates a new mock instance.
func NewMockOrderServiceIface(ctrl *gomock.Controller) *MockOrderServiceIface {
	mock := &MockOrderServiceIface{ctrl: ctrl}
	mock.recorder = &MockOrderServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceIface) EXPECT() *MockOrderServiceIfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderServiceIface) Create(order model.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", order)
}

// Create indicates an expected call of Create.
func (mr *MockOrderServiceIfaceMockRecorder) Create(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderServiceIface)(nil).Create), order)
}

// Delete mocks base method.
func (m *MockOrderServiceIface) Delete(orderID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", orderID)
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderServiceIfaceMockRecorder) Delete(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderServiceIface)(nil).Delete), orderID)
}

// GetAll mocks base method.
func (m *MockOrderServiceIface) GetAll() []model.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Order)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrderServiceIfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrderServiceIface)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockOrderServiceIface) GetByID(orderID int) model.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", orderID)
	ret0, _ := ret[0].(model.Order)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderServiceIfaceMockRecorder) GetByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderServiceIface)(nil).GetByID), orderID)
}

// Update mocks base method.
func (m *MockOrderServiceIface) Update(Order *model.Order, orderID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", Order, orderID)
}

// Update indicates an expected call of Update.
func (mr *MockOrderServiceIfaceMockRecorder) Update(Order, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderServiceIface)(nil).Update), Order, orderID)
}
